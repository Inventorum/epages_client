# DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.


class ProductsService:
    def __init__(self, client):
        self.client = client

    def products_searchfind_attribute_string_values_get(
            self,
            attributeName,
            namespace,
            query,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for GET /products/search/find-attribute-string-values
        """
        if query_params is None:
            query_params = {}

        query_params['attributeName'] = attributeName
        query_params['namespace'] = namespace
        query_params['query'] = query

        uri = self.client.base_url + "/products/search/find-attribute-string-values"
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_searchtags_get(self, startsWith, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for GET /products/search/tags
        """
        if query_params is None:
            query_params = {}

        query_params['startsWith'] = startsWith

        uri = self.client.base_url + "/products/search/tags"
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductIdattachmentsattachmentId_delete(
            self,
            productId,
            attachmentId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for DELETE /products/{productId}/attachments/{attachmentId}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/attachments/" + attachmentId
        return self.client.delete(uri, None, headers, query_params, content_type)

    def products_byProductIdattachmentsattachmentId_get(
            self,
            productId,
            attachmentId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for GET /products/{productId}/attachments/{attachmentId}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/attachments/" + attachmentId
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductIdattachments_get(
            self,
            productId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for GET /products/{productId}/attachments
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/attachments"
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductIdattachments_post(
            self,
            data,
            productId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for POST /products/{productId}/attachments
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/attachments"
        return self.client.post(uri, data, headers, query_params, content_type)

    def products_byProductIdattributesnamespaceattributeName_delete(
            self,
            productId,
            namespace,
            attributeName,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for DELETE /products/{productId}/attributes/{namespace}/{attributeName}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/attributes/" + namespace + "/" + attributeName
        return self.client.delete(uri, None, headers, query_params, content_type)

    def products_byProductIdattributesnamespaceattributeName_get(
            self,
            productId,
            namespace,
            attributeName,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for GET /products/{productId}/attributes/{namespace}/{attributeName}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/attributes/" + namespace + "/" + attributeName
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductIdattributesnamespace_get(
            self,
            productId,
            namespace,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for GET /products/{productId}/attributes/{namespace}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/attributes/" + namespace
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductIdattributes_get(
            self,
            productId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for GET /products/{productId}/attributes
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/attributes"
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductIdattributes_post(
            self,
            data,
            productId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for POST /products/{productId}/attributes
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/attributes"
        return self.client.post(uri, data, headers, query_params, content_type)

    def products_byProductIdavailabilityadjust_available_stock_post(
            self, data, productId, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for POST /products/{productId}/availability/adjust-available-stock
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/availability/adjust-available-stock"
        return self.client.post(uri, data, headers, query_params, content_type)

    def products_byProductIdavailabilitydisable_purchasability_post(
            self, data, productId, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for POST /products/{productId}/availability/disable-purchasability
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/availability/disable-purchasability"
        return self.client.post(uri, data, headers, query_params, content_type)

    def products_byProductIdavailabilitydisable_stock_management_post(
            self, data, productId, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for POST /products/{productId}/availability/disable-stock-management
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/availability/disable-stock-management"
        return self.client.post(uri, data, headers, query_params, content_type)

    def products_byProductIdavailabilityenable_purchasability_post(
            self, data, productId, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for POST /products/{productId}/availability/enable-purchasability
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/availability/enable-purchasability"
        return self.client.post(uri, data, headers, query_params, content_type)

    def products_byProductIdavailabilityenable_stock_management_post(
            self, data, productId, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for POST /products/{productId}/availability/enable-stock-management
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/availability/enable-stock-management"
        return self.client.post(uri, data, headers, query_params, content_type)

    def products_byProductIdavailabilityupdate_stock_threshold_post(
            self, data, productId, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for POST /products/{productId}/availability/update-stock-threshold
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/availability/update-stock-threshold"
        return self.client.post(uri, data, headers, query_params, content_type)

    def products_byProductIdavailability_get(
            self,
            productId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for GET /products/{productId}/availability
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/availability"
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductIddefault_image_put(
            self,
            data,
            productId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for PUT /products/{productId}/default-image
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/default-image"
        return self.client.put(uri, data, headers, query_params, content_type)

    def products_byProductIdimagesimageId_delete(
            self,
            productId,
            imageId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for DELETE /products/{productId}/images/{imageId}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/images/" + imageId
        return self.client.delete(uri, None, headers, query_params, content_type)

    def products_byProductIdimagesimageId_get(
            self,
            productId,
            imageId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for GET /products/{productId}/images/{imageId}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/images/" + imageId
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductIdimages_get(
            self,
            productId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for GET /products/{productId}/images
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/images"
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductIdimages_post(
            self,
            data,
            productId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for POST /products/{productId}/images
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId + "/images"
        return self.client.post(uri, data, headers, query_params, content_type)

    def products_byProductId_delete(self, productId, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for DELETE /products/{productId}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId
        return self.client.delete(uri, None, headers, query_params, content_type)

    def products_byProductId_get(self, productId, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for GET /products/{productId}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_byProductId_patch(
            self,
            data,
            productId,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        It is method for PATCH /products/{productId}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products/" + productId
        return self.client.patch(uri, data, headers, query_params, content_type)

    def products_get(self, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for GET /products
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products"
        return self.client.get(uri, None, headers, query_params, content_type)

    def products_post(self, data, headers=None, query_params=None, content_type="application/json"):
        """
        It is method for POST /products
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/products"
        return self.client.post(uri, data, headers, query_params, content_type)
